// ---- Created with 3Dmigoto v1.3.16 on Fri Apr 14 22:14:30 2023
Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[75];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);
#define ACTIVE IniParams[160].x


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD1,
  float4 v4 : TEXCOORD6,
  float4 v5 : TEXCOORD7,
  float4 v6 : TEXCOORD3,
  float4 v7 : TEXCOORD4,
  float4 v8 : TEXCOORD5,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = v2.xy / v2.ww;
  r0.zw = cb1[7].xy * r0.xy;
  r0.zw = floor(r0.zw);
  r1.xy = (int2)r0.zw;
  r1.zw = float2(0,0);
  r1.xyz = t3.Load(r1.xyz).xyz;
  r1.xyz = r1.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.z = dot(r1.xyz, r1.xyz);
  r0.z = rsqrt(r0.z);
  r0.z = r1.y * r0.z + -cb0[65].x;
  r0.z = cmp(r0.z < 0);
  if (r0.z != 0) discard;
  r0.z = cb1[6].z / v3.z;
  r1.xyz = v3.xyz * r0.zzz;
  r0.x = t0.Sample(s0_s, r0.xy).x;
  r0.x = cb1[8].x * r0.x + cb1[8].y;
  r0.x = 1 / r0.x;
  r0.xyz = r1.xyz * r0.xxx;
  r0.w = 1;
  r1.x = dot(v6.xyzw, r0.xyzw);
  r1.y = dot(v7.xyzw, r0.xyzw);
  r1.z = dot(v8.xyzw, r0.xyzw);
  r0.xyz = float3(0.5,0.5,0.5) + -abs(r1.xyz);
  r0.w = r0.y + r0.y;
  r0.xyz = cmp(r0.xyz < float3(0,0,0));
  r0.x = (int)r0.y | (int)r0.x;
  r0.x = (int)r0.z | (int)r0.x;
  if (r0.x != 0) discard;
  r1.w = -r1.x;
  r0.xy = float2(0.5,0.5) + r1.wz;
  r0.z = r0.w / cb0[65].z;
  r0.z = max(0.00999999978, r0.z);
  r0.z = log2(r0.z);
  r0.z = cb0[65].y * r0.z;
  r0.z = exp2(r0.z);
  r0.z = min(1, r0.z);
  r1.xy = r0.xy * cb0[67].xy + cb0[67].zw;
  r1.xy = v5.xy + r1.xy;
  r0.xy = r0.xy * cb0[74].xy + cb0[74].zw;
  r1.xyzw = t1.Sample(s1_s, r1.xy).xyzw;
  r2.xyzw = cmp(cb0[66].xxxx == float4(0,1,2,3));
  r0.w = cmp(cb0[66].x == 4.000000);
  r0.w = r0.w ? r1.w : 1;
  r0.w = r2.w ? r1.z : r0.w;
  r0.w = r2.z ? r1.y : r0.w;
  r2.x = (int)r2.x | (int)r2.y;
  r0.w = r2.x ? r1.x : r0.w;
  r0.w = saturate(cb0[70].x * r0.w);
  r2.xyz = cb0[69].xyz + -cb0[68].xyz;
  r2.xyz = r0.www * r2.xyz + cb0[68].xyz;
  r0.w = cmp(cb0[72].y == 4.000000);
  r2.w = (uint)cb0[72].y;
  r3.xy = cmp((int2)r2.ww == int2(1,2));
  r1.z = r3.y ? r1.z : r1.w;
  r1.y = r3.x ? r1.y : r1.z;
  r1.x = r2.w ? r1.y : r1.x;
  r0.w = r0.w ? 1 : r1.x;
  r1.xyzw = t2.Sample(s2_s, r0.xy).xyzw;
  r0.x = (uint)cb0[73].x;
  r3.xy = cmp((int2)r0.xx == int2(1,2));
  r0.y = r3.y ? r1.z : r1.w;
  r0.y = r3.x ? r1.y : r0.y;
  r0.x = r0.x ? r0.y : r1.x;
  r0.x = r0.w * r0.x;
  r0.y = cmp(0 < cb0[62].z);
  if (r0.y != 0) {
    r0.y = t4.Load(float4(0,0,0,0)).y;
    r0.y = -1 + r0.y;
    r0.y = cb0[62].z * r0.y + 1;
    r2.xyz = r2.xyz * r0.yyy;
  }
  o0.xyz = v4.xyz * r2.xyz;
  r0.x = saturate(v4.w * r0.x);
  o0.w = r0.x * r0.z;
if (ACTIVE == 1) {
  float orig = o0.z;
  o0.z = 2 + o0.x;
  o0.x = orig;
}  
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Fri Apr 14 22:14:30 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// COLOR                    0   xyzw        1     NONE   float
// TEXCOORD                 0   xyzw        2     NONE   float   xy w
// TEXCOORD                 1   xyz         3     NONE   float   xyz
// TEXCOORD                 6   xyzw        4     NONE   float   xyzw
// TEXCOORD                 7   xyzw        5     NONE   float   xy
// TEXCOORD                 3   xyzw        6     NONE   float   xyzw
// TEXCOORD                 4   xyzw        7     NONE   float   xyzw
// TEXCOORD                 5   xyzw        8     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[75], immediateIndexed
dcl_constantbuffer CB1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v2.xyw
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v5.xy
dcl_input_ps linear v6.xyzw
dcl_input_ps linear v7.xyzw
dcl_input_ps linear v8.xyzw
dcl_output o0.xyzw
dcl_temps 4
div r0.xy, v2.xyxx, v2.wwww
mul r0.zw, r0.xxxy, cb1[7].xxxy
round_ni r0.zw, r0.zzzw
ftoi r1.xy, r0.zwzz
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyzw, t3.xyzw
mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r0.z, r1.xyzx, r1.xyzx
rsq r0.z, r0.z
mad r0.z, r1.y, r0.z, -cb0[65].x
lt r0.z, r0.z, l(0.000000)
discard_nz r0.z
div r0.z, cb1[6].z, v3.z
mul r1.xyz, r0.zzzz, v3.xyzx
sample_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t0.xyzw, s0
mad r0.x, cb1[8].x, r0.x, cb1[8].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
mul r0.xyz, r0.xxxx, r1.xyzx
mov r0.w, l(1.000000)
dp4 r1.x, v6.xyzw, r0.xyzw
dp4 r1.y, v7.xyzw, r0.xyzw
dp4 r1.z, v8.xyzw, r0.xyzw
add r0.xyz, -|r1.xyzx|, l(0.500000, 0.500000, 0.500000, 0.000000)
add r0.w, r0.y, r0.y
lt r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
or r0.x, r0.y, r0.x
or r0.x, r0.z, r0.x
discard_nz r0.x
mov r1.w, -r1.x
add r0.xy, r1.wzww, l(0.500000, 0.500000, 0.000000, 0.000000)
div r0.z, r0.w, cb0[65].z
max r0.z, r0.z, l(0.010000)
log r0.z, r0.z
mul r0.z, r0.z, cb0[65].y
exp r0.z, r0.z
min r0.z, r0.z, l(1.000000)
mad r1.xy, r0.xyxx, cb0[67].xyxx, cb0[67].zwzz
add r1.xy, r1.xyxx, v5.xyxx
mad r0.xy, r0.xyxx, cb0[74].xyxx, cb0[74].zwzz
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r1.xyxx, t1.xyzw, s1
eq r2.xyzw, cb0[66].xxxx, l(0.000000, 1.000000, 2.000000, 3.000000)
eq r0.w, cb0[66].x, l(4.000000)
movc r0.w, r0.w, r1.w, l(1.000000)
movc r0.w, r2.w, r1.z, r0.w
movc r0.w, r2.z, r1.y, r0.w
or r2.x, r2.x, r2.y
movc r0.w, r2.x, r1.x, r0.w
mul_sat r0.w, r0.w, cb0[70].x
add r2.xyz, -cb0[68].xyzx, cb0[69].xyzx
mad r2.xyz, r0.wwww, r2.xyzx, cb0[68].xyzx
eq r0.w, cb0[72].y, l(4.000000)
ftou r2.w, cb0[72].y
ieq r3.xy, r2.wwww, l(1, 2, 0, 0)
movc r1.z, r3.y, r1.z, r1.w
movc r1.y, r3.x, r1.y, r1.z
movc r1.x, r2.w, r1.y, r1.x
movc r0.w, r0.w, l(1.000000), r1.x
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xyxx, t2.xyzw, s2
ftou r0.x, cb0[73].x
ieq r3.xy, r0.xxxx, l(1, 2, 0, 0)
movc r0.y, r3.y, r1.z, r1.w
movc r0.y, r3.x, r1.y, r0.y
movc r0.x, r0.x, r0.y, r1.x
mul r0.x, r0.x, r0.w
lt r0.y, l(0.000000), cb0[62].z
if_nz r0.y
  ld_indexable(texture2d)(float,float,float,float) r0.y, l(0, 0, 0, 0), t4.xyzw
  add r0.y, r0.y, l(-1.000000)
  mad r0.y, cb0[62].z, r0.y, l(1.000000)
  mul r2.xyz, r0.yyyy, r2.xyzx
endif
mul o0.xyz, r2.xyzx, v4.xyzx
mul_sat r0.x, r0.x, v4.w
mul o0.w, r0.z, r0.x
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
