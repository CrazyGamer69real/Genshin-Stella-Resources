// ---- Created with 3Dmigoto v1.3.16 on Fri Apr 14 04:13:40 2023
Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

TextureCube<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[12];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[86];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);
#define ACTIVE IniParams[160].x


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD1,
  float4 v4 : TEXCOORD2,
  float4 v5 : TEXCOORD3,
  float4 v6 : TEXCOORD4,
  float4 v7 : TEXCOORD5,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = dot(v3.xyz, v3.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = v3.xyz * r0.xxx;
  r1.xyz = t0.Sample(s0_s, v2.xy).xyz;
  r1.xyz = r1.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r2.xyz = cb0[73].xyz * r1.xyz;
  r3.xyz = v6.xyz * r2.yyy;
  r2.xyw = r2.xxx * v4.xyz + r3.xyz;
  r2.xyz = r2.zzz * v5.xyz + r2.xyw;
  r0.w = dot(r2.xyz, r0.xyz);
  r0.w = 1 + -r0.w;
  r0.w = max(9.99999975e-05, r0.w);
  r1.w = r0.w * r0.w;
  r0.w = r1.w * r0.w;
  r0.w = saturate(cb0[75].x * r0.w);
  r0.w = max(9.99999975e-05, r0.w);
  r0.w = log2(r0.w);
  r0.w = cb0[75].y * r0.w;
  r0.w = exp2(r0.w);
  r3.xyz = cb0[72].xyz * r0.www;
  r1.w = dot(-r0.xyz, r2.xyz);
  r1.w = r1.w + r1.w;
  r0.xyz = r2.xyz * -r1.www + -r0.xyz;
  r1.w = dot(r0.xyz, r0.xyz);
  r1.w = rsqrt(r1.w);
  r0.xyz = r1.www * r0.xyz;
  r0.x = t1.Sample(s1_s, r0.xyz).x;
  r0.x = saturate(cb0[78].x * r0.x);
  r2.xyz = cb0[77].xyz + -cb0[76].xyz;
  r0.xyz = r0.xxx * r2.xyz + cb0[76].xyz;
  r2.xy = cmp(float2(0,0) != cb0[84].xy);
  r1.w = r2.x ? 0 : 1;
  r2.x = r2.x ? r0.w : 1;
  r0.xyz = r2.xxx * r0.xyz;
  r2.xzw = v6.xyz * r1.yyy;
  r2.xzw = r1.xxx * v4.xyz + r2.xzw;
  r1.xyz = r1.zzz * v5.xyz + r2.xzw;
  r2.xz = cb1[10].xy * r1.yy;
  r1.xy = cb1[9].xy * r1.xx + r2.xz;
  r1.xy = cb1[11].xy * r1.zz + r1.xy;
  r1.xy = cb0[80].zz * r1.xy;
  r1.xy = r1.xy * float2(0.5,0.5) + float2(0.5,0.5);
  r2.xzw = t2.Sample(s2_s, r1.xy).xyz;
  r2.xzw = cb0[81].xyz * r2.xzw;
  r4.xyzw = r2.yyyy ? v1.xyzw : float4(1,1,1,1);
  r1.z = cmp(cb0[84].z == 1.000000);
  if (r1.z != 0) {
    r1.xyz = t3.Sample(s3_s, r1.xy).xyz;
    r1.xyz = r1.xyz * cb0[85].xyz + -r2.xzw;
    r2.xzw = r0.www * r1.xyz + r2.xzw;
  }
  r0.xyz = r3.xyz * r1.www + r0.xyz;
  r0.xyz = r0.xyz + r2.xzw;
  r0.xyz = cb0[82].xyz * r0.xyz;
  o0.xyz = r0.xyz * r4.xyz;
  r0.x = cb0[82].w * r4.w;
  r0.x = cb0[83].x * r0.x;
  o0.w = cb0[83].w * r0.x;
if (ACTIVE == 1) {
  float orig = o0.z;
  o0.z = 2 + o0.x;
  o0.x = orig;
} 
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Fri Apr 14 04:13:40 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xy
// TEXCOORD                 1   xyzw        3     NONE   float   xyz
// TEXCOORD                 2   xyzw        4     NONE   float   xyz
// TEXCOORD                 3   xyzw        5     NONE   float   xyz
// TEXCOORD                 4   xyzw        6     NONE   float   xyz
// TEXCOORD                 5   xyzw        7     NONE   float
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[86], immediateIndexed
dcl_constantbuffer CB1[12], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texturecube (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyz
dcl_output o0.xyzw
dcl_temps 5
dp3 r0.x, v3.xyzx, v3.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, v3.xyzx
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v2.xyxx, t0.xyzw, s0
mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mul r2.xyz, r1.xyzx, cb0[73].xyzx
mul r3.xyz, r2.yyyy, v6.xyzx
mad r2.xyw, r2.xxxx, v4.xyxz, r3.xyxz
mad r2.xyz, r2.zzzz, v5.xyzx, r2.xywx
dp3 r0.w, r2.xyzx, r0.xyzx
add r0.w, -r0.w, l(1.000000)
max r0.w, r0.w, l(0.000100)
mul r1.w, r0.w, r0.w
mul r0.w, r0.w, r1.w
mul_sat r0.w, r0.w, cb0[75].x
max r0.w, r0.w, l(0.000100)
log r0.w, r0.w
mul r0.w, r0.w, cb0[75].y
exp r0.w, r0.w
mul r3.xyz, r0.wwww, cb0[72].xyzx
dp3 r1.w, -r0.xyzx, r2.xyzx
add r1.w, r1.w, r1.w
mad r0.xyz, r2.xyzx, -r1.wwww, -r0.xyzx
dp3 r1.w, r0.xyzx, r0.xyzx
rsq r1.w, r1.w
mul r0.xyz, r0.xyzx, r1.wwww
sample_indexable(texturecube)(float,float,float,float) r0.x, r0.xyzx, t1.xyzw, s1
mul_sat r0.x, r0.x, cb0[78].x
add r2.xyz, -cb0[76].xyzx, cb0[77].xyzx
mad r0.xyz, r0.xxxx, r2.xyzx, cb0[76].xyzx
ne r2.xy, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[84].xyxx
movc r1.w, r2.x, l(0), l(1.000000)
movc r2.x, r2.x, r0.w, l(1.000000)
mul r0.xyz, r0.xyzx, r2.xxxx
mul r2.xzw, r1.yyyy, v6.xxyz
mad r2.xzw, r1.xxxx, v4.xxyz, r2.xxzw
mad r1.xyz, r1.zzzz, v5.xyzx, r2.xzwx
mul r2.xz, r1.yyyy, cb1[10].xxyx
mad r1.xy, cb1[9].xyxx, r1.xxxx, r2.xzxx
mad r1.xy, cb1[11].xyxx, r1.zzzz, r1.xyxx
mul r1.xy, r1.xyxx, cb0[80].zzzz
mad r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r2.xzw, r1.xyxx, t2.xwyz, s2
mul r2.xzw, r2.xxzw, cb0[81].xxyz
movc r4.xyzw, r2.yyyy, v1.xyzw, l(1.000000,1.000000,1.000000,1.000000)
eq r1.z, cb0[84].z, l(1.000000)
if_nz r1.z
  sample_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyxx, t3.xyzw, s3
  mad r1.xyz, r1.xyzx, cb0[85].xyzx, -r2.xzwx
  mad r2.xzw, r0.wwww, r1.xxyz, r2.xxzw
endif
mad r0.xyz, r3.xyzx, r1.wwww, r0.xyzx
add r0.xyz, r2.xzwx, r0.xyzx
mul r0.xyz, r0.xyzx, cb0[82].xyzx
mul o0.xyz, r4.xyzx, r0.xyzx
mul r0.x, r4.w, cb0[82].w
mul r0.x, r0.x, cb0[83].x
mul o0.w, r0.x, cb0[83].w
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
