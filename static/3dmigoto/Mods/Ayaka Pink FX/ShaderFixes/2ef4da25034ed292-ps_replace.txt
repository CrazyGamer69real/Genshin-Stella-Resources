// ---- Created with 3Dmigoto v1.3.16 on Sun Apr 23 23:55:58 2023
Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[8];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[95];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD1,
  float4 v4 : TEXCOORD2,
  float4 v5 : TEXCOORD3,
  float4 v6 : TEXCOORD4,
  float4 v7 : TEXCOORD8,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float o3 : SV_Target3,
  out float o4 : SV_Target4,
  out float o5 : SV_Target5)
{
  const float4 icb[] = { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} };
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = cmp(float2(0,0) != cb0[64].wx);
  r0.z = -0.00999999978 + v1.w;
  r0.z = cmp(r0.z < 0);
  r0.x = r0.x ? r0.z : 0;
  if (r0.x != 0) discard;
  if (r0.y != 0) {
    r0.x = cmp(cb0[64].y < 0.949999988);
    if (r0.x != 0) {
      r0.xy = v4.yx / v4.ww;
      r0.xy = cb1[7].yx * r0.xy;
      r0.xy = float2(0.25,0.25) * r0.xy;
      r0.zw = cmp(r0.xy >= -r0.xy);
      r0.xy = frac(abs(r0.xy));
      r0.xy = r0.zw ? r0.xy : -r0.xy;
      r0.xy = float2(4,4) * r0.xy;
      r0.xy = (uint2)r0.xy;
      r1.x = dot(cb0[8].xyzw, icb[r0.y+0].xyzw);
      r1.y = dot(cb0[9].xyzw, icb[r0.y+0].xyzw);
      r1.z = dot(cb0[10].xyzw, icb[r0.y+0].xyzw);
      r1.w = dot(cb0[11].xyzw, icb[r0.y+0].xyzw);
      r0.x = dot(r1.xyzw, icb[r0.x+0].xyzw);
      r0.x = cb0[64].y * 17 + -r0.x;
      r0.x = -0.00999999978 + r0.x;
      r0.x = cmp(r0.x < 0);
      if (r0.x != 0) discard;
    }
  }
  r0.x = dot(v5.xyz, v5.xyz);
  r0.x = rsqrt(r0.x);
  r0.yzw = v5.xyz * r0.xxx;
  r1.xy = cmp(float2(0,0.5) < cb0[83].ww);
  r1.zw = cmp(float2(0,0) != v6.yx);
  r2.xyz = r1.zzz ? cb0[84].xyz : cb0[83].xyz;
  r2.xyz = r1.xxx ? r2.xyz : cb0[79].xyz;
  r2.xyz = v5.xyz * r0.xxx + r2.xyz;
  r0.x = dot(r2.xyz, r2.xyz);
  r0.x = rsqrt(r0.x);
  r2.xyz = r2.xyz * r0.xxx;
  r0.x = -1 + cb0[64].z;
  r3.xyzw = t0.SampleBias(s0_s, v2.xy, r0.x).xyzw;
  r4.xyz = cmp(cb0[26].xxx == float3(3,1,2));
  r0.x = cb0[38].z * r3.w;
  r5.xyz = cb0[39].xyz + -r3.xyz;
  r5.xyz = r0.xxx * r5.xyz + r3.xyz;
  r3.xyz = r4.xxx ? r5.xyz : r3.xyz;
  r0.x = -cb0[26].y + r3.w;
  r0.x = cmp(r0.x < 0);
  r0.x = r4.y ? r0.x : 0;
  if (r0.x != 0) discard;
  r3.xyz = cb0[23].xyz * r3.xyz;
  r0.x = cmp(0.00999999978 < r3.w);
  r0.x = r0.x ? r4.z : 0;
  r1.x = r0.x ? r3.w : 0;
  r1.z = cmp(0 != cb0[33].y);
  r2.w = 0.5 * v1.x;
  r2.w = r1.z ? r2.w : 0.5;
  r3.w = cmp(r2.w < 0.0500000007);
  r4.x = cmp(0.949999988 < r2.w);
  r2.w = v3.w + r2.w;
  r2.w = 0.5 * r2.w;
  r2.w = r4.x ? 1 : r2.w;
  r2.w = r3.w ? 0 : r2.w;
  r1.z = r1.z ? r2.w : v3.w;
  r2.w = cmp(r1.z < cb0[33].z);
  r3.w = cmp(0 != cb0[36].z);
  r1.z = cb0[33].z + -r1.z;
  r1.z = r1.z / cb0[36].w;
  r4.x = cmp(r1.z >= 1);
  r1.z = 0.00999999978 + r1.z;
  r1.z = log2(r1.z);
  r1.z = cb0[37].x * r1.z;
  r1.z = exp2(r1.z);
  r1.z = min(1, r1.z);
  r1.z = r4.x ? 1 : r1.z;
  r1.z = r3.w ? r1.z : 1;
  r1.z = r2.w ? r1.z : 0;
  r4.x = cmp(9.99999975e-06 < v6.x);
  r4.y = cmp(0.5 < cb0[79].w);
  r4.z = cb0[78].w + cb0[78].w;
  r4.z = min(1, r4.z);
  r4.y = r4.y ? r4.z : 1;
  r4.z = cmp(0 != cb0[34].w);
  r5.xyz = -cb0[35].xyz + cb0[34].xyz;
  r5.xyz = cb0[76].zzz * r5.xyz + cb0[35].xyz;
  r5.xyz = r4.zzz ? r5.xyz : cb0[34].xyz;
  r4.z = cmp(r4.y < 1);
  r6.xyz = r4.zzz ? r5.xyz : 0;
  r1.w = ~(int)r1.w;
  r1.w = r1.w ? r3.w : 0;
  r7.xyz = float3(-1,-1,-1) + r5.xyz;
  r7.xyz = r1.zzz * r7.xyz + float3(1,1,1);
  r7.xyz = r1.www ? r7.xyz : r5.xyz;
  r1.z = (int)r2.w | (int)r4.x;
  r7.xyz = r7.xyz * r3.xyz;
  r8.xyz = cb0[75].xxx * r3.xyz;
  r7.xyz = r1.zzz ? r7.xyz : r8.xyz;
  r8.xyz = r6.xyz * r3.xyz;
  r6.xyz = -r3.xyz * r6.xyz + r7.xyz;
  r6.xyz = r4.yyy * r6.xyz + r8.xyz;
  r6.xyz = r4.zzz ? r6.xyz : r7.xyz;
  r1.z = dot(v3.xyz, r2.xyz);
  r1.z = max(0.00100000005, r1.z);
  r1.z = log2(r1.z);
  r1.z = cb0[38].x * r1.z;
  r1.z = exp2(r1.z);
  r1.z = cmp(0.5 < r1.z);
  r2.xyz = cb0[38].yyy * cb0[37].yzw;
  r2.xyz = float3(0.5,0.5,0.5) * r2.xyz;
  r2.xyz = r1.zzz ? r2.xyz : 0;
  r2.xyz = cb0[75].xxx * r2.xyz;
  r2.xyz = r1.zzz ? r2.xyz : 0;
  r7.xyz = cb0[43].xyz * r3.xyz;
  r7.xyz = cb0[42].zzz * r7.xyz;
  r4.xyw = r2.xyz * r4.yyy;
  r2.xyz = r4.zzz ? r4.xyw : r2.xyz;
  r2.xyz = r6.xyz + r2.xyz;
  r4.xyz = r7.xyz * cb0[42].www + -r2.xyz;
  r4.xyz = r1.xxx * r4.xyz + r2.xyz;
  r2.xyz = r0.xxx ? r4.xyz : r2.xyz;
  r0.x = dot(v3.xyz, v3.xyz);
  r0.x = rsqrt(r0.x);
  r4.xyz = v3.xyz * r0.xxx;
  r0.x = dot(r4.xyz, r0.yzw);
  r0.x = 1 + -r0.x;
  r0.x = max(9.99999975e-05, r0.x);
  r0.y = r0.x * r0.x;
  r0.x = r0.x * r0.y;
  r0.yz = v2.zw * cb0[86].xy + cb0[86].zw;
  r0.w = cmp(cb0[87].z == 1.000000);
  r1.z = 1 + -v2.w;
  r0.w = r0.w ? r1.z : v2.w;
  r0.w = cb0[87].y * 2.0999999 + r0.w;
  r6.y = -1 + r0.w;
  r6.x = v2.z;
  r1.zw = t1.Sample(s2_s, r6.xy).xy;
  r0.yz = cb1[0].yy * cb0[87].xx + r0.yz;
  r0.y = t2.Sample(s1_s, r0.yz).x;
  r0.x = r0.x * 1.10000002 + r0.y;
  r0.y = -0.25 + cb0[87].y;
  r0.y = 6.28000021 * r0.y;
  r0.y = sin(r0.y);
  r0.y = 1 + r0.y;
  r0.x = r0.y * r0.x;
  r0.y = 3 * r1.w;
  r0.x = r0.x * 0.5 + r0.y;
  r0.yzw = cb0[88].xyz * r0.xxx;
  r6.xyz = cb1[5].xyz + -v7.xyz;
  r1.w = dot(r6.xyz, r6.xyz);
  r1.w = rsqrt(r1.w);
  r6.xyz = r6.xyz * r1.www;
  r1.w = saturate(dot(r6.xyz, r4.xyz));
  r1.w = 1 + -r1.w;
  r1.w = max(9.99999975e-05, r1.w);
  r1.w = log2(r1.w);
  r1.w = cb0[89].x * r1.w;
  r1.w = exp2(r1.w);
  r4.xyz = cb0[90].xyz * r1.www;
  r6.xy = v2.zw * cb0[92].xy + cb0[92].zw;
  r1.w = cmp(cb0[93].x == 1.000000);
  r2.w = 1 + -r6.y;
  r1.w = r1.w ? r2.w : r6.y;
  r2.w = cb1[0].y * cb0[93].y;
  r6.z = r1.w * 0.5 + r2.w;
  r1.w = t3.Sample(s3_s, r6.xz).x;
  r1.w = cb0[93].z * r1.w;
  r2.xyz = r0.xxx * cb0[88].xyz + r2.xyz;
  r2.xyz = r4.xyz * cb0[91].xxx + r2.xyz;
  r2.xyz = r1.www * cb0[94].xyz + r2.xyz;
  r0.x = r0.x + r1.x;
  r0.x = r4.x * cb0[91].x + r0.x;
  r0.x = saturate(r1.w * cb0[94].x + r0.x);
  r0.yzw = r3.xyz * r5.xyz + r0.yzw;
  r0.yzw = r4.xyz * cb0[91].xxx + r0.yzw;
  r0.yzw = r1.www * cb0[94].xyz + r0.yzw;
  r1.x = max(r2.y, r2.z);
  r3.w = max(r2.x, r1.x);
  r1.x = cmp(1 < r3.w);
  r3.xyz = r2.xyz / r3.www;
  r2.w = 1;
  r2.xyzw = r1.xxxx ? r3.xyzw : r2.xyzw;
  r3.xyz = -r2.xyz + r0.yzw;
  r3.xyz = cb0[85].xxx * r3.xyz + r2.xyz;
  r0.yzw = r1.yyy ? r3.xyz : r0.yzw;
  r1.x = -0.00100000005 + r1.z;
  r1.x = cmp(r1.x < 0);
  if (r1.x != 0) discard;
  r1.x = saturate(0.0500000007 * r2.w);
  o1.w = sqrt(r1.x);
  r1.x = cmp(0 != cb0[22].x);
  r1.y = 0.00392156886 * cb0[22].y;
  o2.z = r1.x ? r1.y : r0.w;
  o0.xyz = v3.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  o0.w = 0;
  o1.xyz = r2.xyz;
  o2.xy = r0.yz;
  o2.w = r0.x;
  o3.x = 0.0156862754;
  o4.x = r0.x;
  o5.x = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sun Apr 23 23:55:58 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// COLOR                    0   xyzw        1     NONE   float   x  w
// TEXCOORD                 0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyzw        3     NONE   float   xyzw
// TEXCOORD                 2   xyzw        4     NONE   float   xy w
// TEXCOORD                 3   xyz         5     NONE   float   xyz
// TEXCOORD                 4   xy          6     NONE   float   xy
// TEXCOORD                 8   xyzw        7     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   x           3   TARGET   float   x
// SV_Target                4   x           4   TARGET   float   x
// SV_Target                5   x           5   TARGET   float   x
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer CB0[95], immediateIndexed
dcl_constantbuffer CB1[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xw
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyw
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xy
dcl_input_ps linear v7.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.x
dcl_output o4.x
dcl_output o5.x
dcl_temps 9
ne r0.xy, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[64].wxww
add r0.z, v1.w, l(-0.010000)
lt r0.z, r0.z, l(0.000000)
and r0.x, r0.x, r0.z
discard_nz r0.x
if_nz r0.y
  lt r0.x, cb0[64].y, l(0.950000)
  if_nz r0.x
    div r0.xy, v4.yxyy, v4.wwww
    mul r0.xy, r0.xyxx, cb1[7].yxyy
    mul r0.xy, r0.xyxx, l(0.250000, 0.250000, 0.000000, 0.000000)
    ge r0.zw, r0.xxxy, -r0.xxxy
    frc r0.xy, |r0.xyxx|
    movc r0.xy, r0.zwzz, r0.xyxx, -r0.xyxx
    mul r0.xy, r0.xyxx, l(4.000000, 4.000000, 0.000000, 0.000000)
    ftou r0.xy, r0.xyxx
    dp4 r1.x, cb0[8].xyzw, icb[r0.y + 0].xyzw
    dp4 r1.y, cb0[9].xyzw, icb[r0.y + 0].xyzw
    dp4 r1.z, cb0[10].xyzw, icb[r0.y + 0].xyzw
    dp4 r1.w, cb0[11].xyzw, icb[r0.y + 0].xyzw
    dp4 r0.x, r1.xyzw, icb[r0.x + 0].xyzw
    mad r0.x, cb0[64].y, l(17.000000), -r0.x
    add r0.x, r0.x, l(-0.010000)
    lt r0.x, r0.x, l(0.000000)
    discard_nz r0.x
  endif
endif
dp3 r0.x, v5.xyzx, v5.xyzx
rsq r0.x, r0.x
mul r0.yzw, r0.xxxx, v5.xxyz
lt r1.xy, l(0.000000, 0.500000, 0.000000, 0.000000), cb0[83].wwww
ne r1.zw, l(0.000000, 0.000000, 0.000000, 0.000000), v6.yyyx
movc r2.xyz, r1.zzzz, cb0[84].xyzx, cb0[83].xyzx
movc r2.xyz, r1.xxxx, r2.xyzx, cb0[79].xyzx
mad r2.xyz, v5.xyzx, r0.xxxx, r2.xyzx
dp3 r0.x, r2.xyzx, r2.xyzx
rsq r0.x, r0.x
mul r2.xyz, r0.xxxx, r2.xyzx
add r0.x, cb0[64].z, l(-1.000000)
sample_b_indexable(texture2d)(float,float,float,float) r3.xyzw, v2.xyxx, t0.xyzw, s0, r0.x
eq r4.xyz, cb0[26].xxxx, l(3.000000, 1.000000, 2.000000, 0.000000)
mul r0.x, r3.w, cb0[38].z
add r5.xyz, -r3.xyzx, cb0[39].xyzx
mad r5.xyz, r0.xxxx, r5.xyzx, r3.xyzx
movc r3.xyz, r4.xxxx, r5.xyzx, r3.xyzx
add r0.x, r3.w, -cb0[26].y
lt r0.x, r0.x, l(0.000000)
and r0.x, r4.y, r0.x
discard_nz r0.x
mul r3.xyz, r3.xyzx, cb0[23].xyzx
lt r0.x, l(0.010000), r3.w
and r0.x, r0.x, r4.z
and r1.x, r3.w, r0.x
ne r1.z, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[33].y
mul r2.w, v1.x, l(0.500000)
movc r2.w, r1.z, r2.w, l(0.500000)
lt r3.w, r2.w, l(0.050000)
lt r4.x, l(0.950000), r2.w
add r2.w, r2.w, v3.w
mul r2.w, r2.w, l(0.500000)
movc r2.w, r4.x, l(1.000000), r2.w
movc r2.w, r3.w, l(0), r2.w
movc r1.z, r1.z, r2.w, v3.w
lt r2.w, r1.z, cb0[33].z
ne r3.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[36].z
add r1.z, -r1.z, cb0[33].z
div r1.z, r1.z, cb0[36].w
ge r4.x, r1.z, l(1.000000)
add r1.z, r1.z, l(0.010000)
log r1.z, r1.z
mul r1.z, r1.z, cb0[37].x
exp r1.z, r1.z
min r1.z, r1.z, l(1.000000)
movc r1.z, r4.x, l(1.000000), r1.z
movc r1.z, r3.w, r1.z, l(1.000000)
and r1.z, r1.z, r2.w
lt r4.x, l(0.000010), v6.x
lt r4.y, l(0.500000), cb0[79].w
add r4.z, cb0[78].w, cb0[78].w
min r4.z, r4.z, l(1.000000)
movc r4.y, r4.y, r4.z, l(1.000000)
ne r4.z, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[34].w
add r5.xyz, cb0[34].xyzx, -cb0[35].xyzx
mad r5.xyz, cb0[76].zzzz, r5.xyzx, cb0[35].xyzx
movc r5.xyz, r4.zzzz, r5.xyzx, cb0[34].xyzx
lt r4.z, r4.y, l(1.000000)
and r6.xyz, r5.xyzx, r4.zzzz
not r1.w, r1.w
and r1.w, r1.w, r3.w
add r7.xyz, r5.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r7.xyz, r1.zzzz, r7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
movc r7.xyz, r1.wwww, r7.xyzx, r5.xyzx
or r1.z, r2.w, r4.x
mul r7.xyz, r3.xyzx, r7.xyzx
mul r8.xyz, r3.xyzx, cb0[75].xxxx
movc r7.xyz, r1.zzzz, r7.xyzx, r8.xyzx
mul r8.xyz, r3.xyzx, r6.xyzx
mad r6.xyz, -r3.xyzx, r6.xyzx, r7.xyzx
mad r6.xyz, r4.yyyy, r6.xyzx, r8.xyzx
movc r6.xyz, r4.zzzz, r6.xyzx, r7.xyzx
dp3 r1.z, v3.xyzx, r2.xyzx
max r1.z, r1.z, l(0.001000)
log r1.z, r1.z
mul r1.z, r1.z, cb0[38].x
exp r1.z, r1.z
lt r1.z, l(0.500000), r1.z
mul r2.xyz, cb0[37].yzwy, cb0[38].yyyy
mul r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
and r2.xyz, r1.zzzz, r2.xyzx
mul r2.xyz, r2.xyzx, cb0[75].xxxx
and r2.xyz, r1.zzzz, r2.xyzx
mul r7.xyz, r3.xyzx, cb0[43].xyzx
mul r7.xyz, r7.xyzx, cb0[42].zzzz
mul r4.xyw, r4.yyyy, r2.xyxz
movc r2.xyz, r4.zzzz, r4.xywx, r2.xyzx
add r2.xyz, r2.xyzx, r6.xyzx
mad r4.xyz, r7.xyzx, cb0[42].wwww, -r2.xyzx
mad r4.xyz, r1.xxxx, r4.xyzx, r2.xyzx
movc r2.xyz, r0.xxxx, r4.xyzx, r2.xyzx
dp3 r0.x, v3.xyzx, v3.xyzx
rsq r0.x, r0.x
mul r4.xyz, r0.xxxx, v3.xyzx
dp3 r0.x, r4.xyzx, r0.yzwy
add r0.x, -r0.x, l(1.000000)
max r0.x, r0.x, l(0.000100)
mul r0.y, r0.x, r0.x
mul r0.x, r0.y, r0.x
mad r0.yz, v2.zzwz, cb0[86].xxyx, cb0[86].zzwz
eq r0.w, cb0[87].z, l(1.000000)
add r1.z, -v2.w, l(1.000000)
movc r0.w, r0.w, r1.z, v2.w
mad r0.w, cb0[87].y, l(2.100000), r0.w
add r6.y, r0.w, l(-1.000000)
mov r6.x, v2.z
sample_indexable(texture2d)(float,float,float,float) r1.zw, r6.xyxx, t1.zwxy, s2
mad r0.yz, cb1[0].yyyy, cb0[87].xxxx, r0.yyzy
sample_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t2.yxzw, s1
mad r0.x, r0.x, l(1.100000), r0.y
add r0.y, cb0[87].y, l(-0.250000)
mul r0.y, r0.y, l(6.280000)
sincos r0.y, null, r0.y
add r0.y, r0.y, l(1.000000)
mul r0.x, r0.x, r0.y
mul r0.y, r1.w, l(3.000000)
mad r0.x, r0.x, l(0.500000), r0.y
mul r0.yzw, r0.xxxx, cb0[88].xxyz
add r6.xyz, -v7.xyzx, cb1[5].xyzx
dp3 r1.w, r6.xyzx, r6.xyzx
rsq r1.w, r1.w
mul r6.xyz, r1.wwww, r6.xyzx
dp3_sat r1.w, r6.xyzx, r4.xyzx
add r1.w, -r1.w, l(1.000000)
max r1.w, r1.w, l(0.000100)
log r1.w, r1.w
mul r1.w, r1.w, cb0[89].x
exp r1.w, r1.w
mul r4.xyz, r1.wwww, cb0[90].xyzx
mad r6.xy, v2.zwzz, cb0[92].xyxx, cb0[92].zwzz
eq r1.w, cb0[93].x, l(1.000000)
add r2.w, -r6.y, l(1.000000)
movc r1.w, r1.w, r2.w, r6.y
mul r2.w, cb0[93].y, cb1[0].y
mad r6.z, r1.w, l(0.500000), r2.w
sample_indexable(texture2d)(float,float,float,float) r1.w, r6.xzxx, t3.yzwx, s3
mul r1.w, r1.w, cb0[93].z
mad r2.xyz, r0.xxxx, cb0[88].xyzx, r2.xyzx
mad r2.xyz, r4.xyzx, cb0[91].xxxx, r2.xyzx
mad r2.xyz, r1.wwww, cb0[94].xyzx, r2.xyzx
add r0.x, r1.x, r0.x
mad r0.x, r4.x, cb0[91].x, r0.x
mad_sat r0.x, r1.w, cb0[94].x, r0.x
mad r0.yzw, r3.xxyz, r5.xxyz, r0.yyzw
mad r0.yzw, r4.xxyz, cb0[91].xxxx, r0.yyzw
mad r0.yzw, r1.wwww, cb0[94].xxyz, r0.yyzw
max r1.x, r2.z, r2.y
max r3.w, r1.x, r2.x
lt r1.x, l(1.000000), r3.w
div r3.xyz, r2.xyzx, r3.wwww
mov r2.w, l(1.000000)
movc r2.xyzw, r1.xxxx, r3.xyzw, r2.xyzw
add r3.xyz, r0.yzwy, -r2.xyzx
mad r3.xyz, cb0[85].xxxx, r3.xyzx, r2.xyzx
movc r0.yzw, r1.yyyy, r3.xxyz, r0.yyzw
add r1.x, r1.z, l(-0.001000)
lt r1.x, r1.x, l(0.000000)
discard_nz r1.x
mul_sat r1.x, r2.w, l(0.050000)
sqrt o1.w, r1.x
ne r1.x, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[22].x
mul r1.y, cb0[22].y, l(0.00392156886)
movc o2.z, r1.x, r1.y, r0.w
mad o0.xyz, v3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mov o0.w, l(0)
mov o1.xyz, r2.xyzx
mov o2.xy, r0.yzyy
mov o2.w, r0.x
mov o3.x, l(0.0156862754)
mov o4.x, r0.x
mov o5.x, l(0)
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
