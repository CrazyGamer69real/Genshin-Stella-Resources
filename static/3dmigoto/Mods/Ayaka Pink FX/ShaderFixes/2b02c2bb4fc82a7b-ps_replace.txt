// ---- Created with 3Dmigoto v1.3.16 on Fri Apr 14 04:19:15 2023
Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb0 : register(b0)
{
  float4 cb0[91];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);
#define ACTIVE IniParams[160].x


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD1,
  float4 v4 : TEXCOORD2,
  float4 v5 : TEXCOORD3,
  float4 v6 : TEXCOORD4,
  float v7 : TEXCOORD5,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = t0.Sample(s0_s, v2.zw).xyzw;
  r1.xyzw = cmp(cb0[71].wwww == float4(1,2,3,4));
  r2.xyz = r1.www ? r0.www : r0.xyz;
  r2.xyz = r1.zzz ? r0.zzz : r2.xyz;
  r1.yzw = r1.yyy ? r0.yyy : r2.xyz;
  r1.xyz = r1.xxx ? r0.xxx : r1.yzw;
  r2.xyzw = cmp(cb0[84].yyyy == float4(0,1,2,3));
  r0.z = r2.w ? r0.z : 1;
  r0.y = r2.z ? r0.y : r0.z;
  r0.x = r2.y ? r0.x : r0.y;
  r0.x = r2.x ? r0.w : r0.x;
  r0.yzw = cb0[80].xyz + -cb0[79].xyz;
  r0.yzw = r1.xxx * r0.yzw + cb0[79].xyz;
  r1.w = cmp(0 != cb0[71].z);
  r0.yzw = r1.www ? r0.yzw : r1.xyz;
  r1.x = v5.w;
  r1.y = v4.w;
  r1.xyzw = t1.Sample(s1_s, r1.xy).xyzw;
  r2.xyzw = cmp(cb0[84].wwww == float4(0,1,2,3));
  r1.w = r2.w ? r1.w : 0;
  r1.z = r2.z ? r1.z : r1.w;
  r1.y = r2.y ? r1.y : r1.z;
  r1.x = r2.x ? r1.x : r1.y;
  r1.y = cb0[87].y * r1.x;
  r1.z = cmp(0 != cb0[84].z);
  r1.x = r1.x * cb0[87].y + r0.x;
  r0.x = r1.y * r0.x;
  r0.x = r1.z ? r1.x : r0.x;
  r0.yzw = cb0[82].xxx * r0.yzw;
  r0.yzw = v1.xyz * r0.yzw;
  r0.yzw = cb0[81].xyz * r0.yzw;
  r0.yzw = cb0[83].xyz * r0.yzw;
  r1.x = cmp(0 < cb0[71].x);
  if (r1.x != 0) {
    r1.x = t2.Load(float4(0,0,0,0)).y;
    r1.x = -1 + r1.x;
    r1.x = cb0[71].x * r1.x + 1;
    o0.xyz = r1.xxx * r0.yzw;
  } else {
    o0.xyz = r0.yzw;
  }
  r0.y = cb0[84].x * cb0[83].w;
  r0.y = v1.w * r0.y;
  r0.y = cb0[81].w * r0.y;
  r0.x = r0.y * r0.x;
  o0.w = saturate(cb0[90].z * r0.x);
if (ACTIVE == 1) {  
  float orig = o0.z;
  o0.z = 2 + o0.x;
  o0.x = orig;
}  
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Fri Apr 14 04:19:15 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float     zw
// TEXCOORD                 1   xyzw        3     NONE   float
// TEXCOORD                 2   xyzw        4     NONE   float      w
// TEXCOORD                 3   xyzw        5     NONE   float      w
// TEXCOORD                 4   xyzw        6     NONE   float
// TEXCOORD                 5   x           7     NONE   float
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[91], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.zw
dcl_input_ps linear v4.w
dcl_input_ps linear v5.w
dcl_output o0.xyzw
dcl_temps 3
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.zwzz, t0.xyzw, s0
eq r1.xyzw, cb0[71].wwww, l(1.000000, 2.000000, 3.000000, 4.000000)
movc r2.xyz, r1.wwww, r0.wwww, r0.xyzx
movc r2.xyz, r1.zzzz, r0.zzzz, r2.xyzx
movc r1.yzw, r1.yyyy, r0.yyyy, r2.xxyz
movc r1.xyz, r1.xxxx, r0.xxxx, r1.yzwy
eq r2.xyzw, cb0[84].yyyy, l(0.000000, 1.000000, 2.000000, 3.000000)
movc r0.z, r2.w, r0.z, l(1.000000)
movc r0.y, r2.z, r0.y, r0.z
movc r0.x, r2.y, r0.x, r0.y
movc r0.x, r2.x, r0.w, r0.x
add r0.yzw, -cb0[79].xxyz, cb0[80].xxyz
mad r0.yzw, r1.xxxx, r0.yyzw, cb0[79].xxyz
ne r1.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[71].z
movc r0.yzw, r1.wwww, r0.yyzw, r1.xxyz
mov r1.x, v5.w
mov r1.y, v4.w
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r1.xyxx, t1.xyzw, s1
eq r2.xyzw, cb0[84].wwww, l(0.000000, 1.000000, 2.000000, 3.000000)
and r1.w, r1.w, r2.w
movc r1.z, r2.z, r1.z, r1.w
movc r1.y, r2.y, r1.y, r1.z
movc r1.x, r2.x, r1.x, r1.y
mul r1.y, r1.x, cb0[87].y
ne r1.z, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[84].z
mad r1.x, r1.x, cb0[87].y, r0.x
mul r0.x, r0.x, r1.y
movc r0.x, r1.z, r1.x, r0.x
mul r0.yzw, r0.yyzw, cb0[82].xxxx
mul r0.yzw, r0.yyzw, v1.xxyz
mul r0.yzw, r0.yyzw, cb0[81].xxyz
mul r0.yzw, r0.yyzw, cb0[83].xxyz
lt r1.x, l(0.000000), cb0[71].x
if_nz r1.x
  ld_indexable(texture2d)(float,float,float,float) r1.x, l(0, 0, 0, 0), t2.yxzw
  add r1.x, r1.x, l(-1.000000)
  mad r1.x, cb0[71].x, r1.x, l(1.000000)
  mul o0.xyz, r0.yzwy, r1.xxxx
else
  mov o0.xyz, r0.yzwy
endif
mul r0.y, cb0[83].w, cb0[84].x
mul r0.y, r0.y, v1.w
mul r0.y, r0.y, cb0[81].w
mul r0.x, r0.x, r0.y
mul_sat o0.w, r0.x, cb0[90].z
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
