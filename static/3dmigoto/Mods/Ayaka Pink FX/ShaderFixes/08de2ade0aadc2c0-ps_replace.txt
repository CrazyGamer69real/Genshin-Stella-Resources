// ---- Created with 3Dmigoto v1.3.16 on Fri Apr 14 04:15:41 2023
Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[74];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);
#define ACTIVE IniParams[160].x


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD1,
  float4 v4 : TEXCOORD2,
  float4 v5 : TEXCOORD3,
  float4 v6 : TEXCOORD4,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = float2(1,2) * v3.zw;
  r0.xy = t0.Sample(s1_s, r0.xy).xy;
  r0.xyzw = cb0[63].xxxx * r0.xyxy;
  r0.xyzw = r0.xyzw * float4(2,2,2,2) + -cb0[63].xxxx;
  r0.xyzw = r0.xyzw * float4(1,-1,1,-1) + v2.xyzw;
  r1.x = t1.Sample(s3_s, v4.xy).x;
  r0.xy = r1.xx * cb0[72].yy + r0.xy;
  r1.xyz = t2.Sample(s0_s, r0.zw).xzw;
  r0.x = t3.Sample(s2_s, r0.xy).x;
  r0.yzw = cb0[61].xyz + -cb0[60].xyz;
  r0.yzw = r1.xxx * r0.yzw + cb0[60].xyz;
  r0.yzw = cb0[64].xyz * r1.yyy + r0.yzw;
  r0.yzw = cb0[65].xxx * r0.yzw;
  r0.yzw = v1.yyy * r0.yzw;
  r1.xy = v6.xy / v6.ww;
  r1.x = t4.Sample(s4_s, r1.xy).x;
  r1.x = cb1[8].z * r1.x + cb1[8].w;
  r1.x = 1 / r1.x;
  r1.x = -v6.w + r1.x;
  r1.y = saturate(cb0[73].x * r1.x);
  r1.x = saturate(r1.x / cb0[73].y);
  r1.w = 1 + -r1.y;
  r1.x = r1.x * r1.w + r1.y;
  r0.yzw = cb0[68].xyz * r0.yzw;
  r1.y = cmp(0 < cb0[59].x);
  if (r1.y != 0) {
    r1.y = t5.Load(float4(0,0,0,0)).y;
    r1.y = -1 + r1.y;
    r1.y = cb0[59].x * r1.y + 1;
    o0.xyz = r1.yyy * r0.yzw;
  } else {
    o0.xyz = r0.yzw;
  }
  r0.y = v1.w * 1.39999998 + -0.5;
  r0.x = r0.x + -r0.y;
  r0.x = r0.x * r1.z;
  r0.x = v1.z * r0.x;
  r0.x = cb0[72].z * r0.x;
  r0.x = saturate(cb0[68].w * r0.x);
  r0.x = r0.x * r1.x;
  o0.w = cb0[72].w * r0.x * 0.2;
if (ACTIVE == 1) {
  float orig = o0.z;
  o0.z = 2 + o0.x;
  o0.x = orig;
}
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Fri Apr 14 04:15:41 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// COLOR                    0   xyzw        1     NONE   float    yzw
// TEXCOORD                 0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyzw        3     NONE   float     zw
// TEXCOORD                 2   xyzw        4     NONE   float   xy
// TEXCOORD                 3   xyzw        5     NONE   float
// TEXCOORD                 4   xyzw        6     NONE   float   xy w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[74], immediateIndexed
dcl_constantbuffer CB1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps linear v1.yzw
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.zw
dcl_input_ps linear v4.xy
dcl_input_ps linear v6.xyw
dcl_output o0.xyzw
dcl_temps 2
mul r0.xy, v3.zwzz, l(1.000000, 2.000000, 0.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r0.xy, r0.xyxx, t0.xyzw, s1
mul r0.xyzw, r0.xyxy, cb0[63].xxxx
mad r0.xyzw, r0.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), -cb0[63].xxxx
mad r0.xyzw, r0.xyzw, l(1.000000, -1.000000, 1.000000, -1.000000), v2.xyzw
sample_indexable(texture2d)(float,float,float,float) r1.x, v4.xyxx, t1.xyzw, s3
mad r0.xy, r1.xxxx, cb0[72].yyyy, r0.xyxx
sample_indexable(texture2d)(float,float,float,float) r1.xyz, r0.zwzz, t2.xzwy, s0
sample_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t3.xyzw, s2
add r0.yzw, -cb0[60].xxyz, cb0[61].xxyz
mad r0.yzw, r1.xxxx, r0.yyzw, cb0[60].xxyz
mad r0.yzw, cb0[64].xxyz, r1.yyyy, r0.yyzw
mul r0.yzw, r0.yyzw, cb0[65].xxxx
mul r0.yzw, r0.yyzw, v1.yyyy
div r1.xy, v6.xyxx, v6.wwww
sample_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t4.xyzw, s4
mad r1.x, cb1[8].z, r1.x, cb1[8].w
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
add r1.x, r1.x, -v6.w
mul_sat r1.y, r1.x, cb0[73].x
div_sat r1.x, r1.x, cb0[73].y
add r1.w, -r1.y, l(1.000000)
mad r1.x, r1.x, r1.w, r1.y
mul r0.yzw, r0.yyzw, cb0[68].xxyz
lt r1.y, l(0.000000), cb0[59].x
if_nz r1.y
  ld_indexable(texture2d)(float,float,float,float) r1.y, l(0, 0, 0, 0), t5.xyzw
  add r1.y, r1.y, l(-1.000000)
  mad r1.y, cb0[59].x, r1.y, l(1.000000)
  mul o0.xyz, r0.yzwy, r1.yyyy
else
  mov o0.xyz, r0.yzwy
endif
mad r0.y, v1.w, l(1.400000), l(-0.500000)
add r0.x, -r0.y, r0.x
mul r0.x, r1.z, r0.x
mul r0.x, r0.x, v1.z
mul r0.x, r0.x, cb0[72].z
mul_sat r0.x, r0.x, cb0[68].w
mul r0.x, r1.x, r0.x
mul o0.w, r0.x, cb0[72].w
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
