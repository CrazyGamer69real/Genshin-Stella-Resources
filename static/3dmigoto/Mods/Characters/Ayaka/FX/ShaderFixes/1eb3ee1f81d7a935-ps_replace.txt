// ---- Created with 3Dmigoto v1.3.16 on Fri Apr 14 22:21:50 2023
Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[84];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);
#define ACTIVE IniParams[160].x


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD1,
  float4 v4 : TEXCOORD2,
  float4 v5 : TEXCOORD6,
  float4 v6 : TEXCOORD7,
  float4 v7 : TEXCOORD5,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = cmp(cb0[65].wz == float2(1,0));
  if (r0.x != 0) {
    r0.xz = v5.zw + v2.zw;
  } else {
    r0.xz = v5.zw;
  }
  r1.xyzw = t0.Sample(s1_s, r0.xz).xyzw;
  if (r0.y == 0) {
    r0.xyz = cmp(cb0[65].zzz == float3(1,2,3));
    r0.z = r0.z ? r1.w : 0;
    r0.y = r0.y ? r1.z : r0.z;
    r1.x = r0.x ? r1.y : r0.y;
  }
  r0.x = -cb0[68].y + r1.x;
  r0.xy = cb0[65].yy * r0.xx + v5.xy;
  r0.xyzw = t1.Sample(s0_s, r0.xy).xyzw;
  r1.x = cmp(cb0[63].y == 0.000000);
  if (r1.x != 0) {
    r1.x = r0.x;
  } else {
    r1.yzw = cmp(cb0[63].yyy == float3(1,2,3));
    r1.w = r1.w ? r0.w : 0;
    r1.z = r1.z ? r0.z : r1.w;
    r1.x = r1.y ? r0.y : r1.z;
  }
  r1.x = saturate(cb0[63].x * r1.x);
  r1.y = cmp(cb0[60].z == 1.000000);
  if (r1.y != 0) {
    r1.yzw = v4.xyz + -v3.xyz;
    r1.yzw = r1.xxx * r1.yzw + v3.xyz;
  } else {
    r2.xyz = cb0[62].xyz + -cb0[61].xyz;
    r1.yzw = r1.xxx * r2.xyz + cb0[61].xyz;
  }
  r2.xy = cmp(cb0[73].xw == float2(0,0));
  if (r2.x == 0) {
    r2.xzw = cmp(cb0[73].xxx == float3(1,2,3));
    r0.w = r2.w ? r0.w : 0;
    r0.z = r2.z ? r0.z : r0.w;
    r0.x = r2.x ? r0.y : r0.z;
  }
  r0.y = cmp(cb0[74].x == 1.000000);
  if (r0.y != 0) {
    r0.yz = v6.xy + v2.zw;
  } else {
    r0.yz = v6.xy;
  }
  r3.xyzw = t2.Sample(s2_s, r0.yz).xyzw;
  if (r2.y == 0) {
    r0.yzw = cmp(cb0[73].www == float3(1,2,3));
    r0.w = r0.w ? r3.w : 0;
    r0.z = r0.z ? r3.z : r0.w;
    r3.x = r0.y ? r3.y : r0.z;
  }
  r0.yzw = cb0[60].yyy * r1.yzw;
  r0.yzw = v1.xyz * r0.yzw;
  r1.xyz = cb0[71].xyz * r0.yzw;
  r1.w = cmp(0 != cb0[76].z);
  if (r1.w != 0) {
    r1.w = cb0[76].w * v1.w;
    r2.x = 1 + -cb0[77].x;
    r2.x = dot(r1.ww, r2.xx);
    r2.x = r2.x + r3.x;
    r2.x = -1 + r2.x;
    r2.x = saturate(cb0[76].y * r2.x);
    r2.x = saturate(cb0[73].y * r2.x);
    r2.x = 1 + -r2.x;
    r0.yzw = -r0.yzw * cb0[71].xyz + cb0[78].xyz;
    r1.xyz = r2.xxx * r0.yzw + r1.xyz;
  } else {
    r1.w = v1.w;
  }
  r0.y = dot(r1.ww, cb0[71].ww);
  r0.y = r0.y + r3.x;
  r0.y = -1 + r0.y;
  r0.y = saturate(cb0[76].y * r0.y);
  r0.x = cb0[73].y * r0.x;
  r0.x = saturate(r0.x * r0.y);
  r0.yz = v2.xy * cb0[80].xy + cb0[80].zw;
  r2.xyzw = t3.Sample(s3_s, r0.yz).xyzw;
  r0.y = cmp(cb0[79].x == 0.000000);
  if (r0.y == 0) {
    r0.yzw = cmp(cb0[79].xxx == float3(1,2,3));
    r0.w = r0.w ? r2.w : 0;
    r0.z = r0.z ? r2.z : r0.w;
    r2.x = r0.y ? r2.y : r0.z;
  }
  r0.x = r2.x * r0.x;
  r0.yz = v7.xy / v7.ww;
  r0.y = t4.Sample(s4_s, r0.yz).x;
  r0.y = cb1[8].z * r0.y + cb1[8].w;
  r0.y = 1 / r0.y;
  r0.y = -v7.w + r0.y;
  r0.z = saturate(cb0[81].x * r0.y);
  r0.y = saturate(r0.y / cb0[83].y);
  r0.w = 1 + -r0.z;
  r0.y = r0.y * r0.w + r0.z;
  r1.xyz = cb0[72].xyz * r1.xyz;
  r0.z = cmp(0 < cb0[53].x);
  if (r0.z != 0) {
    r0.z = t5.Load(float4(0,0,0,0)).y;
    r0.z = -1 + r0.z;
    r0.z = cb0[53].x * r0.z + 1;
    o0.xyz = r1.xyz * r0.zzz;
  } else {
    o0.xyz = r1.xyz;
  }
  r0.x = cb0[72].w * r0.x;
  r0.y = min(1, r0.y);
  r0.x = r0.x * r0.y;
  o0.w = cb0[73].z * r0.x;
if (ACTIVE == 1) {
  float orig = o0.z;
  o0.z = 2 + o0.x;
  o0.x = orig;
}  
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Fri Apr 14 22:21:50 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyzw        3     NONE   float   xyz
// TEXCOORD                 2   xyzw        4     NONE   float   xyz
// TEXCOORD                 6   xyzw        5     NONE   float   xyzw
// TEXCOORD                 7   xyzw        6     NONE   float   xy
// TEXCOORD                 5   xyzw        7     NONE   float   xy w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[84], immediateIndexed
dcl_constantbuffer CB1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyzw
dcl_input_ps linear v6.xy
dcl_input_ps linear v7.xyw
dcl_output o0.xyzw
dcl_temps 4
eq r0.xy, cb0[65].wzww, l(1.000000, 0.000000, 0.000000, 0.000000)
if_nz r0.x
  add r0.xz, v2.zzwz, v5.zzwz
else
  mov r0.xz, v5.zzwz
endif
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xzxx, t0.xyzw, s1
if_z r0.y
  eq r0.xyz, cb0[65].zzzz, l(1.000000, 2.000000, 3.000000, 0.000000)
  and r0.z, r1.w, r0.z
  movc r0.y, r0.y, r1.z, r0.z
  movc r1.x, r0.x, r1.y, r0.y
endif
add r0.x, r1.x, -cb0[68].y
mad r0.xy, cb0[65].yyyy, r0.xxxx, v5.xyxx
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.xyxx, t1.xyzw, s0
eq r1.x, cb0[63].y, l(0.000000)
if_nz r1.x
  mov r1.x, r0.x
else
  eq r1.yzw, cb0[63].yyyy, l(0.000000, 1.000000, 2.000000, 3.000000)
  and r1.w, r0.w, r1.w
  movc r1.z, r1.z, r0.z, r1.w
  movc r1.x, r1.y, r0.y, r1.z
endif
mul_sat r1.x, r1.x, cb0[63].x
eq r1.y, cb0[60].z, l(1.000000)
if_nz r1.y
  add r1.yzw, -v3.xxyz, v4.xxyz
  mad r1.yzw, r1.xxxx, r1.yyzw, v3.xxyz
else
  add r2.xyz, -cb0[61].xyzx, cb0[62].xyzx
  mad r1.yzw, r1.xxxx, r2.xxyz, cb0[61].xxyz
endif
eq r2.xy, cb0[73].xwxx, l(0.000000, 0.000000, 0.000000, 0.000000)
if_z r2.x
  eq r2.xzw, cb0[73].xxxx, l(1.000000, 0.000000, 2.000000, 3.000000)
  and r0.w, r0.w, r2.w
  movc r0.z, r2.z, r0.z, r0.w
  movc r0.x, r2.x, r0.y, r0.z
endif
eq r0.y, cb0[74].x, l(1.000000)
if_nz r0.y
  add r0.yz, v2.zzwz, v6.xxyx
else
  mov r0.yz, v6.xxyx
endif
sample_indexable(texture2d)(float,float,float,float) r3.xyzw, r0.yzyy, t2.xyzw, s2
if_z r2.y
  eq r0.yzw, cb0[73].wwww, l(0.000000, 1.000000, 2.000000, 3.000000)
  and r0.w, r3.w, r0.w
  movc r0.z, r0.z, r3.z, r0.w
  movc r3.x, r0.y, r3.y, r0.z
endif
mul r0.yzw, r1.yyzw, cb0[60].yyyy
mul r0.yzw, r0.yyzw, v1.xxyz
mul r1.xyz, r0.yzwy, cb0[71].xyzx
ne r1.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[76].z
if_nz r1.w
  mul r1.w, v1.w, cb0[76].w
  add r2.x, -cb0[77].x, l(1.000000)
  dp2 r2.x, r1.wwww, r2.xxxx
  add r2.x, r3.x, r2.x
  add r2.x, r2.x, l(-1.000000)
  mul_sat r2.x, r2.x, cb0[76].y
  mul_sat r2.x, r2.x, cb0[73].y
  add r2.x, -r2.x, l(1.000000)
  mad r0.yzw, -r0.yyzw, cb0[71].xxyz, cb0[78].xxyz
  mad r1.xyz, r2.xxxx, r0.yzwy, r1.xyzx
else
  mov r1.w, v1.w
endif
dp2 r0.y, r1.wwww, cb0[71].wwww
add r0.y, r3.x, r0.y
add r0.y, r0.y, l(-1.000000)
mul_sat r0.y, r0.y, cb0[76].y
mul r0.x, r0.x, cb0[73].y
mul_sat r0.x, r0.y, r0.x
mad r0.yz, v2.xxyx, cb0[80].xxyx, cb0[80].zzwz
sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.yzyy, t3.xyzw, s3
eq r0.y, cb0[79].x, l(0.000000)
if_z r0.y
  eq r0.yzw, cb0[79].xxxx, l(0.000000, 1.000000, 2.000000, 3.000000)
  and r0.w, r2.w, r0.w
  movc r0.z, r0.z, r2.z, r0.w
  movc r2.x, r0.y, r2.y, r0.z
endif
mul r0.x, r0.x, r2.x
div r0.yz, v7.xxyx, v7.wwww
sample_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t4.yxzw, s4
mad r0.y, cb1[8].z, r0.y, cb1[8].w
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
add r0.y, r0.y, -v7.w
mul_sat r0.z, r0.y, cb0[81].x
div_sat r0.y, r0.y, cb0[83].y
add r0.w, -r0.z, l(1.000000)
mad r0.y, r0.y, r0.w, r0.z
mul r1.xyz, r1.xyzx, cb0[72].xyzx
lt r0.z, l(0.000000), cb0[53].x
if_nz r0.z
  ld_indexable(texture2d)(float,float,float,float) r0.z, l(0, 0, 0, 0), t5.xzyw
  add r0.z, r0.z, l(-1.000000)
  mad r0.z, cb0[53].x, r0.z, l(1.000000)
  mul o0.xyz, r0.zzzz, r1.xyzx
else
  mov o0.xyz, r1.xyzx
endif
mul r0.x, r0.x, cb0[72].w
min r0.y, r0.y, l(1.000000)
mul r0.x, r0.y, r0.x
mul o0.w, r0.x, cb0[73].z
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
