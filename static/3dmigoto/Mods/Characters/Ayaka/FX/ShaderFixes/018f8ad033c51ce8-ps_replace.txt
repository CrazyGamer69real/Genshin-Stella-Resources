// ---- Created with 3Dmigoto v1.3.16 on Fri Apr 14 04:17:41 2023
Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[7];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[78];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);
#define ACTIVE IniParams[160].x


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD1,
  float4 v4 : TEXCOORD2,
  float4 v5 : TEXCOORD5,
  float4 v6 : TEXCOORD6,
  float4 v7 : TEXCOORD7,
  float4 v8 : TEXCOORD8,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = cmp(cb0[63].x == 1.000000);
  r0.yz = v2.xy * cb0[64].xy + cb0[64].zw;
  r1.x = cb1[0].y * cb0[63].y + r0.y;
  r1.y = cb1[0].y * cb0[65].x + r0.z;
  r0.yz = v3.xy + r1.xy;
  r0.xy = r0.xx ? r0.yz : r1.xy;
  r0.xyzw = t0.Sample(s1_s, r0.xy).xyzw;
  r1.x = cmp(cb0[62].w == 3.000000);
  r0.w = r1.x ? r0.w : 0;
  r1.xyzw = cmp(cb0[62].xwww == float4(1,0,1,2));
  r0.z = r1.w ? r0.z : r0.w;
  r0.y = r1.z ? r0.y : r0.z;
  r0.x = r1.y ? r0.x : r0.y;
  r0.x = cb0[65].y + r0.x;
  r0.y = cmp(cb0[60].x == 1.000000);
  r0.zw = v2.xy * cb0[61].xy + cb0[61].zw;
  r0.z = cb1[0].y * cb0[60].y + r0.z;
  r0.w = cb1[0].y * cb0[62].y + r0.w;
  r1.y = v3.x + r0.z;
  r2.x = r0.y ? r1.y : r0.z;
  r0.y = v3.y + r0.w;
  r2.y = r1.x ? r0.y : r0.w;
  r0.xy = cb0[62].zz * r0.xx + r2.xy;
  r0.xyzw = t1.Sample(s0_s, r0.xy).xyzw;
  r1.xy = cmp(cb0[59].wz == float2(4,1));
  r1.x = r1.x ? r0.w : 0;
  r2.xyzw = cmp(cb0[59].wwww == float4(0,1,2,3));
  r1.x = r2.w ? r0.z : r1.x;
  r1.x = r2.z ? r0.y : r1.x;
  r1.x = r2.y ? r0.x : r1.x;
  r1.xzw = r2.xxx ? r0.xyz : r1.xxx;
  r2.xyz = -v5.xyz + v4.xyz;
  r2.xyz = r1.xxx * r2.xyz + v5.xyz;
  r1.xyz = r1.yyy ? r2.xyz : r1.xzw;
  r1.xyz = cb0[59].yyy * r1.xyz;
  r1.xyz = v1.xyz * r1.xyz;
  r1.xyz = cb0[68].xyz * r1.xyz;
  o0.xyz = cb0[69].xyz * r1.xyz;
  r1.xyzw = cmp(cb0[70].yyyy == float4(0,1,2,3));
  r0.z = r1.w ? r0.z : 0;
  r0.y = r1.z ? r0.y : r0.z;
  r0.x = r1.y ? r0.x : r0.y;
  r0.x = r1.x ? r0.w : r0.x;
  r0.x = cb0[70].z * r0.x;
  r0.y = -cb1[6].y + v6.w;
  r0.y = -cb0[75].z + r0.y;
  r0.y = saturate(r0.y / cb0[75].y);
  r0.z = 1 + -r0.y;
  r0.w = cmp(cb0[75].x == 1.000000);
  r0.y = r0.w ? r0.y : r0.z;
  r0.x = r0.x * r0.y;
  r0.y = cb0[70].x * cb0[69].w;
  r0.y = v1.w * r0.y;
  r0.y = cb0[68].w * r0.y;
  r0.x = saturate(r0.y * r0.x);
  o0.w = cb0[77].z * r0.x * 0.01;
if (ACTIVE == 1) {  
  float orig = o0.z;
  o0.z = 2 + o0.x;
  o0.x = orig;
}  
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Fri Apr 14 04:17:41 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xy
// TEXCOORD                 1   xyzw        3     NONE   float   xy
// TEXCOORD                 2   xyzw        4     NONE   float   xyz
// TEXCOORD                 5   xyzw        5     NONE   float   xyz
// TEXCOORD                 6   xyzw        6     NONE   float      w
// TEXCOORD                 7   xyzw        7     NONE   float
// TEXCOORD                 8   xyzw        8     NONE   float
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[78], immediateIndexed
dcl_constantbuffer CB1[7], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xy
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.w
dcl_output o0.xyzw
dcl_temps 3
eq r0.x, cb0[63].x, l(1.000000)
mad r0.yz, v2.xxyx, cb0[64].xxyx, cb0[64].zzwz
mad r1.x, cb1[0].y, cb0[63].y, r0.y
mad r1.y, cb1[0].y, cb0[65].x, r0.z
add r0.yz, r1.xxyx, v3.xxyx
movc r0.xy, r0.xxxx, r0.yzyy, r1.xyxx
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.xyxx, t0.xyzw, s1
eq r1.x, cb0[62].w, l(3.000000)
and r0.w, r0.w, r1.x
eq r1.xyzw, cb0[62].xwww, l(1.000000, 0.000000, 1.000000, 2.000000)
movc r0.z, r1.w, r0.z, r0.w
movc r0.y, r1.z, r0.y, r0.z
movc r0.x, r1.y, r0.x, r0.y
add r0.x, r0.x, cb0[65].y
eq r0.y, cb0[60].x, l(1.000000)
mad r0.zw, v2.xxxy, cb0[61].xxxy, cb0[61].zzzw
mad r0.z, cb1[0].y, cb0[60].y, r0.z
mad r0.w, cb1[0].y, cb0[62].y, r0.w
add r1.y, r0.z, v3.x
movc r2.x, r0.y, r1.y, r0.z
add r0.y, r0.w, v3.y
movc r2.y, r1.x, r0.y, r0.w
mad r0.xy, cb0[62].zzzz, r0.xxxx, r2.xyxx
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.xyxx, t1.xyzw, s0
eq r1.xy, cb0[59].wzww, l(4.000000, 1.000000, 0.000000, 0.000000)
and r1.x, r0.w, r1.x
eq r2.xyzw, cb0[59].wwww, l(0.000000, 1.000000, 2.000000, 3.000000)
movc r1.x, r2.w, r0.z, r1.x
movc r1.x, r2.z, r0.y, r1.x
movc r1.x, r2.y, r0.x, r1.x
movc r1.xzw, r2.xxxx, r0.xxyz, r1.xxxx
add r2.xyz, v4.xyzx, -v5.xyzx
mad r2.xyz, r1.xxxx, r2.xyzx, v5.xyzx
movc r1.xyz, r1.yyyy, r2.xyzx, r1.xzwx
mul r1.xyz, r1.xyzx, cb0[59].yyyy
mul r1.xyz, r1.xyzx, v1.xyzx
mul r1.xyz, r1.xyzx, cb0[68].xyzx
mul o0.xyz, r1.xyzx, cb0[69].xyzx
eq r1.xyzw, cb0[70].yyyy, l(0.000000, 1.000000, 2.000000, 3.000000)
and r0.z, r0.z, r1.w
movc r0.y, r1.z, r0.y, r0.z
movc r0.x, r1.y, r0.x, r0.y
movc r0.x, r1.x, r0.w, r0.x
mul r0.x, r0.x, cb0[70].z
add r0.y, v6.w, -cb1[6].y
add r0.y, r0.y, -cb0[75].z
div_sat r0.y, r0.y, cb0[75].y
add r0.z, -r0.y, l(1.000000)
eq r0.w, cb0[75].x, l(1.000000)
movc r0.y, r0.w, r0.y, r0.z
mul r0.x, r0.y, r0.x
mul r0.y, cb0[69].w, cb0[70].x
mul r0.y, r0.y, v1.w
mul r0.y, r0.y, cb0[68].w
mul_sat r0.x, r0.x, r0.y
mul o0.w, r0.x, cb0[77].z
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
