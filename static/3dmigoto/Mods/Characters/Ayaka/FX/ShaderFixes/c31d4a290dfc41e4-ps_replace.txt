// ---- Created with 3Dmigoto v1.3.16 on Fri Apr 14 04:16:18 2023
Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[80];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);
#define ACTIVE IniParams[160].x


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD1,
  float4 v4 : TEXCOORD2,
  float4 v5 : TEXCOORD6,
  float4 v6 : TEXCOORD7,
  float4 v7 : TEXCOORD5,
  float4 v8 : TEXCOORD8,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = t0.Sample(s0_s, v5.xy).xyzw;
  r1.x = cmp(cb0[62].y == 0.000000);
  if (r1.x != 0) {
    r1.x = r0.x;
  } else {
    r1.yzw = cmp(cb0[62].yyy == float3(1,2,3));
    r1.w = r1.w ? r0.w : 0;
    r1.z = r1.z ? r0.z : r1.w;
    r1.x = r1.y ? r0.y : r1.z;
  }
  r1.x = saturate(cb0[62].x * r1.x);
  r1.y = cmp(cb0[59].z == 1.000000);
  if (r1.y != 0) {
    r1.yzw = v4.xyz + -v3.xyz;
    r1.yzw = r1.xxx * r1.yzw + v3.xyz;
  } else {
    r2.xyz = cb0[61].xyz + -cb0[60].xyz;
    r1.yzw = r1.xxx * r2.xyz + cb0[60].xyz;
  }
  r2.xy = v7.xy / v7.ww;
  r1.x = t1.Sample(s1_s, r2.xy).x;
  r1.x = cb1[8].z * r1.x + cb1[8].w;
  r1.x = 1 / r1.x;
  r1.x = -v7.w + r1.x;
  r2.x = saturate(cb0[72].x * r1.x);
  r1.x = saturate(r1.x / cb0[73].w);
  r2.y = 1 + -r2.x;
  r1.x = r1.x * r2.y + r2.x;
  r2.xyz = cmp(cb0[74].ywz == float3(0,1,0));
  if (r2.x == 0) {
    r3.xyzw = cmp(cb0[74].yyyy == float4(1,2,3,4));
    r2.x = r3.w ? 1.000000 : 0;
    r0.w = r3.z ? r0.w : r2.x;
    r0.z = r3.y ? r0.z : r0.w;
    r0.x = r3.x ? r0.y : r0.z;
  }
  if (r2.y != 0) {
    r0.yz = v6.xy + v2.zw;
  } else {
    r0.yz = v6.xy;
  }
  r3.xyzw = t2.Sample(s2_s, r0.yz).xyzw;
  if (r2.z == 0) {
    r0.yzw = cmp(cb0[74].zzz == float3(1,2,3));
    r0.w = r0.w ? r3.w : 0;
    r0.z = r0.z ? r3.z : r0.w;
    r3.x = r0.y ? r3.y : r0.z;
  }
  r0.yzw = cb0[70].xyz * v1.xyz;
  r2.x = -v1.w * cb0[70].w + 1;
  r0.x = r0.x * r3.x + -r2.x;
  r0.x = saturate(cb0[77].y * r0.x);
  r1.x = cb0[74].x * r1.x;
  r0.x = saturate(r1.x * r0.x);
  r2.xyzw = t3.Sample(s3_s, v6.zw).xyzw;
  r1.x = cmp(cb0[77].z == 0.000000);
  if (r1.x == 0) {
    r3.xyz = cmp(cb0[77].zzz == float3(1,2,3));
    r1.x = r3.z ? r2.w : 0;
    r1.x = r3.y ? r2.z : r1.x;
    r2.x = r3.x ? r2.y : r1.x;
  }
  r0.x = r2.x * r0.x;
  r0.yzw = r1.yzw * r0.yzw;
  r0.yzw = cb0[59].yyy * r0.yzw;
  r0.yzw = cb0[71].xyz * r0.yzw;
  r1.x = cmp(0 < cb0[59].x);
  if (r1.x != 0) {
    r1.x = t4.Load(float4(0,0,0,0)).y;
    r1.x = -1 + r1.x;
    r1.x = cb0[59].x * r1.x + 1;
    o0.xyz = r1.xxx * r0.yzw;
  } else {
    o0.xyz = r0.yzw;
  }
  r0.x = cb0[71].w * r0.x;
  o0.w = cb0[79].x * r0.x * 0.1;
if (ACTIVE == 1) {
  float orig = o0.z;
  o0.z = 2 + o0.x;
  o0.x = orig;
} 
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Fri Apr 14 04:16:18 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float     zw
// TEXCOORD                 1   xyzw        3     NONE   float   xyz
// TEXCOORD                 2   xyzw        4     NONE   float   xyz
// TEXCOORD                 6   xyzw        5     NONE   float   xy
// TEXCOORD                 7   xyzw        6     NONE   float   xyzw
// TEXCOORD                 5   xyzw        7     NONE   float   xy w
// TEXCOORD                 8   xyzw        8     NONE   float
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[80], immediateIndexed
dcl_constantbuffer CB1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.zw
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xy
dcl_input_ps linear v6.xyzw
dcl_input_ps linear v7.xyw
dcl_output o0.xyzw
dcl_temps 4
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v5.xyxx, t0.xyzw, s0
eq r1.x, cb0[62].y, l(0.000000)
if_nz r1.x
  mov r1.x, r0.x
else
  eq r1.yzw, cb0[62].yyyy, l(0.000000, 1.000000, 2.000000, 3.000000)
  and r1.w, r0.w, r1.w
  movc r1.z, r1.z, r0.z, r1.w
  movc r1.x, r1.y, r0.y, r1.z
endif
mul_sat r1.x, r1.x, cb0[62].x
eq r1.y, cb0[59].z, l(1.000000)
if_nz r1.y
  add r1.yzw, -v3.xxyz, v4.xxyz
  mad r1.yzw, r1.xxxx, r1.yyzw, v3.xxyz
else
  add r2.xyz, -cb0[60].xyzx, cb0[61].xyzx
  mad r1.yzw, r1.xxxx, r2.xxyz, cb0[60].xxyz
endif
div r2.xy, v7.xyxx, v7.wwww
sample_indexable(texture2d)(float,float,float,float) r1.x, r2.xyxx, t1.xyzw, s1
mad r1.x, cb1[8].z, r1.x, cb1[8].w
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
add r1.x, r1.x, -v7.w
mul_sat r2.x, r1.x, cb0[72].x
div_sat r1.x, r1.x, cb0[73].w
add r2.y, -r2.x, l(1.000000)
mad r1.x, r1.x, r2.y, r2.x
eq r2.xyz, cb0[74].ywzy, l(0.000000, 1.000000, 0.000000, 0.000000)
if_z r2.x
  eq r3.xyzw, cb0[74].yyyy, l(1.000000, 2.000000, 3.000000, 4.000000)
  and r2.x, r3.w, l(0x3f800000)
  movc r0.w, r3.z, r0.w, r2.x
  movc r0.z, r3.y, r0.z, r0.w
  movc r0.x, r3.x, r0.y, r0.z
endif
if_nz r2.y
  add r0.yz, v2.zzwz, v6.xxyx
else
  mov r0.yz, v6.xxyx
endif
sample_indexable(texture2d)(float,float,float,float) r3.xyzw, r0.yzyy, t2.xyzw, s2
if_z r2.z
  eq r0.yzw, cb0[74].zzzz, l(0.000000, 1.000000, 2.000000, 3.000000)
  and r0.w, r3.w, r0.w
  movc r0.z, r0.z, r3.z, r0.w
  movc r3.x, r0.y, r3.y, r0.z
endif
mul r0.yzw, v1.xxyz, cb0[70].xxyz
mad r2.x, -v1.w, cb0[70].w, l(1.000000)
mad r0.x, r0.x, r3.x, -r2.x
mul_sat r0.x, r0.x, cb0[77].y
mul r1.x, r1.x, cb0[74].x
mul_sat r0.x, r0.x, r1.x
sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v6.zwzz, t3.xyzw, s3
eq r1.x, cb0[77].z, l(0.000000)
if_z r1.x
  eq r3.xyz, cb0[77].zzzz, l(1.000000, 2.000000, 3.000000, 0.000000)
  and r1.x, r2.w, r3.z
  movc r1.x, r3.y, r2.z, r1.x
  movc r2.x, r3.x, r2.y, r1.x
endif
mul r0.x, r0.x, r2.x
mul r0.yzw, r0.yyzw, r1.yyzw
mul r0.yzw, r0.yyzw, cb0[59].yyyy
mul r0.yzw, r0.yyzw, cb0[71].xxyz
lt r1.x, l(0.000000), cb0[59].x
if_nz r1.x
  ld_indexable(texture2d)(float,float,float,float) r1.x, l(0, 0, 0, 0), t4.yxzw
  add r1.x, r1.x, l(-1.000000)
  mad r1.x, cb0[59].x, r1.x, l(1.000000)
  mul o0.xyz, r0.yzwy, r1.xxxx
else
  mov o0.xyz, r0.yzwy
endif
mul r0.x, r0.x, cb0[71].w
mul o0.w, r0.x, cb0[79].x
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
