// ---- Created with 3Dmigoto v1.3.16 on Fri Apr 14 04:22:05 2023
Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[86];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);
#define ACTIVE IniParams[160].x


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD1,
  float4 v4 : TEXCOORD2,
  float4 v5 : TEXCOORD5,
  float4 v6 : TEXCOORD6,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = t0.Sample(s1_s, v2.xy).xyzw;
  r1.xyzw = cmp(cb0[75].wwww == float4(0,1,2,3));
  r0.w = r1.w ? r0.w : 0;
  r0.z = r1.z ? r0.z : r0.w;
  r0.y = r1.y ? r0.y : r0.z;
  r0.x = r1.x ? r0.x : r0.y;
  r0.y = cb0[78].y * cb0[75].z;
  r0.x = cb0[75].z * r0.x + r0.y;
  r0.yz = v2.zw + r0.xx;
  r1.xyzw = t1.Sample(s0_s, r0.yz).xyzw;
  r2.xyzw = cmp(cb0[73].yyyy == float4(1,2,3,4));
  r0.yzw = r2.www ? r1.www : r1.xyz;
  r0.yzw = r2.zzz ? r1.zzz : r0.yzw;
  r0.yzw = r2.yyy ? r1.yyy : r0.yzw;
  r0.yzw = r2.xxx ? r1.xxx : r0.yzw;
  r2.xyzw = cmp(cb0[80].yyyy == float4(0,1,2,3));
  r1.z = r2.w ? r1.z : 1;
  r1.y = r2.z ? r1.y : r1.z;
  r1.x = r2.y ? r1.x : r1.y;
  r1.x = r2.x ? r1.w : r1.x;
  r1.y = cb0[80].z * r1.x;
  r1.zw = r0.xx * cb0[81].zz + v6.xy;
  r2.xyzw = t2.Sample(s2_s, r1.zw).xyzw;
  r3.xyzw = cmp(cb0[81].yyyy == float4(0,1,2,3));
  r0.x = r3.w ? r2.w : 0;
  r0.x = r3.z ? r2.z : r0.x;
  r0.x = r3.y ? r2.y : r0.x;
  r0.x = r3.x ? r2.x : r0.x;
  r0.x = cb0[81].x * r0.x;
  r1.z = cmp(0 != cb0[80].w);
  r1.x = r1.x * cb0[80].z + r0.x;
  r0.x = r1.y * r0.x;
  r0.x = r1.z ? r1.x : r0.x;
  r1.xy = v5.xy / v5.ww;
  r1.x = t3.Sample(s3_s, r1.xy).x;
  r1.x = cb1[8].z * r1.x + cb1[8].w;
  r1.x = 1 / r1.x;
  r1.x = -v5.w + r1.x;
  r1.y = saturate(cb0[85].y * r1.x);
  r1.x = saturate(r1.x / cb0[85].z);
  r1.z = 1 + -r1.y;
  r1.x = r1.x * r1.z + r1.y;
  r0.x = r1.x * r0.x;
  r0.yzw = cb0[73].xxx * r0.yzw;
  r0.x = cb0[80].x * r0.x;
  r0.xyzw = cb0[79].wxyz * r0.xyzw;
  r0.yzw = v1.xyz * r0.yzw;
  r0.yzw = cb0[72].xyz * r0.yzw;
  r1.x = cmp(0 < cb0[71].x);
  if (r1.x != 0) {
    r1.x = t4.Load(float4(0,0,0,0)).y;
    r1.x = -1 + r1.x;
    r1.x = cb0[71].x * r1.x + 1;
    o0.xyz = r1.xxx * r0.yzw;
  } else {
    o0.xyz = r0.yzw;
  }
  r0.y = cb0[72].w * v1.w;
  r0.x = r0.y * r0.x;
  o0.w = saturate(cb0[71].z * r0.x);
if (ACTIVE == 1) {  
  float orig = o0.z;
  o0.z = 1 + o0.x;
  o0.x = 0.5 + orig;
}  
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Fri Apr 14 04:22:05 2023
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyzw        3     NONE   float
// TEXCOORD                 2   xyzw        4     NONE   float
// TEXCOORD                 5   xyzw        5     NONE   float   xy w
// TEXCOORD                 6   xyzw        6     NONE   float   xy
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[86], immediateIndexed
dcl_constantbuffer CB1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v5.xyw
dcl_input_ps linear v6.xy
dcl_output o0.xyzw
dcl_temps 4
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s1
eq r1.xyzw, cb0[75].wwww, l(0.000000, 1.000000, 2.000000, 3.000000)
and r0.w, r0.w, r1.w
movc r0.z, r1.z, r0.z, r0.w
movc r0.y, r1.y, r0.y, r0.z
movc r0.x, r1.x, r0.x, r0.y
mul r0.y, cb0[75].z, cb0[78].y
mad r0.x, cb0[75].z, r0.x, r0.y
add r0.yz, r0.xxxx, v2.zzwz
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.yzyy, t1.xyzw, s0
eq r2.xyzw, cb0[73].yyyy, l(1.000000, 2.000000, 3.000000, 4.000000)
movc r0.yzw, r2.wwww, r1.wwww, r1.xxyz
movc r0.yzw, r2.zzzz, r1.zzzz, r0.yyzw
movc r0.yzw, r2.yyyy, r1.yyyy, r0.yyzw
movc r0.yzw, r2.xxxx, r1.xxxx, r0.yyzw
eq r2.xyzw, cb0[80].yyyy, l(0.000000, 1.000000, 2.000000, 3.000000)
movc r1.z, r2.w, r1.z, l(1.000000)
movc r1.y, r2.z, r1.y, r1.z
movc r1.x, r2.y, r1.x, r1.y
movc r1.x, r2.x, r1.w, r1.x
mul r1.y, r1.x, cb0[80].z
mad r1.zw, r0.xxxx, cb0[81].zzzz, v6.xxxy
sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.zwzz, t2.xyzw, s2
eq r3.xyzw, cb0[81].yyyy, l(0.000000, 1.000000, 2.000000, 3.000000)
and r0.x, r2.w, r3.w
movc r0.x, r3.z, r2.z, r0.x
movc r0.x, r3.y, r2.y, r0.x
movc r0.x, r3.x, r2.x, r0.x
mul r0.x, r0.x, cb0[81].x
ne r1.z, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[80].w
mad r1.x, r1.x, cb0[80].z, r0.x
mul r0.x, r0.x, r1.y
movc r0.x, r1.z, r1.x, r0.x
div r1.xy, v5.xyxx, v5.wwww
sample_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t3.xyzw, s3
mad r1.x, cb1[8].z, r1.x, cb1[8].w
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
add r1.x, r1.x, -v5.w
mul_sat r1.y, r1.x, cb0[85].y
div_sat r1.x, r1.x, cb0[85].z
add r1.z, -r1.y, l(1.000000)
mad r1.x, r1.x, r1.z, r1.y
mul r0.x, r0.x, r1.x
mul r0.yzw, r0.yyzw, cb0[73].xxxx
mul r0.x, r0.x, cb0[80].x
mul r0.xyzw, r0.xyzw, cb0[79].wxyz
mul r0.yzw, r0.yyzw, v1.xxyz
mul r0.yzw, r0.yyzw, cb0[72].xxyz
lt r1.x, l(0.000000), cb0[71].x
if_nz r1.x
  ld_indexable(texture2d)(float,float,float,float) r1.x, l(0, 0, 0, 0), t4.yxzw
  add r1.x, r1.x, l(-1.000000)
  mad r1.x, cb0[71].x, r1.x, l(1.000000)
  mul o0.xyz, r0.yzwy, r1.xxxx
else
  mov o0.xyz, r0.yzwy
endif
mul r0.y, v1.w, cb0[72].w
mul r0.x, r0.x, r0.y
mul_sat o0.w, r0.x, cb0[71].z
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
